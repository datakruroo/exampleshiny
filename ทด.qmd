---
title: "Untitled"
format: html
editor: visual
---

เอกสารนี้เป็นรายละเอียดการวิเคราะห์และทดลองสร้างโมเดลการทำนายความสำเร็จในการเรียนวิจัย

```{r}
library(tidyverse)
data <- read_csv("final_merged_2.csv")
glimpse(data)

```

คัดเลือกตัวแปรที่คาดว่าจะใช้งานก่อน

```{r}
use_data <- data %>% 
  select(student_id, correct, choose_method, concepts, interpretation,
         submit_time, percent_submit, department,
         learning_performance, res_participation, midterm, outcome_A) %>% 
  mutate(student_id = str_remove(student_id , "^.{4}")) %>% 
  group_by(student_id, outcome_A) %>% 
  mutate(research_score = mean(correct)*100) %>% 
  select(-correct) %>% 
  unique() %>% 
  mutate(research_score = ifelse(research_score>60,"pass","fail")) %>% 
  mutate(research_score = factor(research_score, levels = c("fail", "pass"))) %>% 
  ungroup() %>% 
  mutate(submit_time = ifelse(submit_time > 168, "late", "ontime")) %>% 
  mutate(percent_submit = ifelse(percent_submit < 95, "low", "high")) %>% 
  select(-student_id, -interpretation, -concepts, -choose_method,-learning_performance, -res_participation)

```

```{r}
library(patchwork)
p1 <- use_data %>% 
  ggplot(aes(x = research_score))+
  geom_bar()

p2 <- use_data %>%
  ggplot(aes(x = submit_time))+
  geom_bar()

p1/p2
```

## สร้างโมเดลทำนาย

```{r}
library(tidymodels)
```

### แบ่งข้อมูลเป็นชุดฝึกและชุดทดสอบ

```{r}
set.seed(123)
split <- initial_split(use_data, prop = 0.8, strata = research_score)
train_data <- training(split)
test_data <- testing(split)
```

### glmnet

```{r}
library(themis)
library(embed)
glmnet_rec <- recipe(research_score ~ ., data = train_data) %>% 
  step_lencode_glm(department, outcome = "research_score") %>% 
  step_dummy(all_nominal_predictors()) %>% 
  step_bsmote(research_score) 

prep <- recipe(research_score ~ ., data = train_data) %>% 
  step_lencode_glm(department, outcome = "research_score") %>% 
  step_dummy(all_nominal_predictors()) %>% 
  step_bsmote(research_score)  %>% prep()

glmnet_spec <- logistic_reg(penalty = tune(), mixture = tune()) %>% 
  set_engine("glmnet") %>% 
  set_mode("classification")
```

### glmnet workflow and tuning

```{r}
glmnet_workflow <- workflow() %>% 
  add_recipe(glmnet_rec) %>% 
  add_model(glmnet_spec)

set.seed(234)
folds <- vfold_cv(train_data, v = 5, repeats = 3, strata = research_score)

library(future)
plan(multisession, workers = 12)
glmnet_res <- glmnet_workflow %>% 
  tune_grid(
    resamples = folds, 
    grid = 10,
    metrics = metric_set(roc_auc, f_meas, accuracy, sens, spec),
    control = control_grid(save_pred = TRUE))
```

```{r}
glmnet_res %>% autoplot()
```

```{r}
best_auc <- glmnet_res %>% select_best(metric = "roc_auc")
```

### final model

```{r}
glmnet_lastfit <- glmnet_workflow %>% 
  finalize_workflow(best_auc) %>% 
  last_fit(split,
  metrics = metric_set(roc_auc, f_meas, accuracy, sens, spec)) 

glmnet_lastfit  %>% collect_metrics()
glmnet_lastfit %>% collect_predictions() %>% 
  conf_mat(truth = research_score, estimate = .pred_class) %>% summary()

glmnet_final <- glmnet_workflow %>%
    finalize_workflow(best_auc) %>% 
    fit(train_data)

glmnet_final %>% predict(new_data = test_data,
                         type = "prob")

predict_fun <- function(model, newdata) {
  predict(model, new_data = newdata, type = "prob")$.pred_fail
}
glmnet_final %>% vip(pred_wrapper = predict_fun)

glmnet_final %>% predict(new_data = test_data %>% filter(student_id == "150327"),
                         type = "prob")

```

```{r}
saveRDS(glmnet_final, "glmnet_model.rds")
saveRDS(prep, "glmnet_recipe.rds")
```

```{r}
## more ui
# UI
ui <- dashboardPage(
  dashboardHeader(title = "KruRoo Teller"),
  dashboardSidebar(
    sidebarMenu(
      menuItem("Dashboard", tabName = "dashboard", icon = icon("dashboard"))
    )
  ),
  dashboardBody(
    tabItems(
      tabItem(
        tabName = "dashboard",
        fluidRow(
          box(
            title = "โปรดกรอกข้อมูลของนิสิต",
            status = "primary",
            solidHeader = TRUE,
            width = 4,
            selectInput(
              "department", 
              "สาขาวิชาเอกของนิสิต", 
              choices = data %>% count(department) %>% pull(department)
            ),
            selectInput(
              "ontime_submit", 
              "โดยปกติส่งการบ้านตรงเวลาหรือไม่", 
              choices = c("ส่วนใหญ่ตรงเวลา","ส่วนใหญ่ไม่ตรงเวลา")
            ),
            sliderInput(
              "midterm", 
              "คะแนนสอบ Midterm ที่ได้รับ (ร้อยละ):",
              min = 0, max = 30,
              value = 25, 
              step = 5),
            selectInput(
              "percent_submit", 
              "ร้อยละของการส่งการบ้าน:", 
              choices = c("น้อยกว่าร้อยละ 90","ร้อยละ 90 ขึ้นไป")
              
            ),
            actionButton("predict", "Predict")
          ),
          box(
            title = "Prediction Probabilities",
            status = "success",
            solidHeader = TRUE,
            width = 8,
            plotOutput("probPlot")
          )
        )
      )
    )
  )
)
```
